// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 5.3.1 by TAF Team.
// Generated from `/data/user/xuzhengwei/upload/User.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var Test = Test || {};
module.exports.Test = Test;

Test.UserProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

Test.UserProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

Test.UserProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


Test.BasicInfo = function() {
    this.uid = 0;
    this.token = "";
    this.username = "";
    this._classname = "Test.BasicInfo";
};
Test.BasicInfo.prototype = new TafStream.JceStruct();
Test.BasicInfo._classname = "Test.BasicInfo";

Test.BasicInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.BasicInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.BasicInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.BasicInfo();
    tmp.uid = is.readInt64(0, false, 0);
    tmp.token = is.readString(1, false, "");
    tmp.username = is.readString(2, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.BasicInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.uid != undefined && this.uid != 0) {
        os.writeInt64(0, this.uid);
    }
    if (this.token != undefined && this.token != "") {
        os.writeString(1, this.token);
    }
    if (this.username != undefined && this.username != "") {
        os.writeString(2, this.username);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.BasicInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.BasicInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.BasicInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.token = this.token;
    tmp.username = this.username;
    
    return tmp;
}
Test.BasicInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("token") || (this.token = json.token);
    !json.hasOwnProperty("username") || (this.username = json.username);
}
Test.BasicInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.BasicInfo.new = function () {
    return new Test.BasicInfo();
}
Test.BasicInfo.create = function (is) {
    return Test.BasicInfo._readFrom(is);
}
Test.BasicRsp = function() {
    this.iRet = 0;
    this.message = "";
    this._classname = "Test.BasicRsp";
};
Test.BasicRsp.prototype = new TafStream.JceStruct();
Test.BasicRsp._classname = "Test.BasicRsp";

Test.BasicRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.BasicRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.BasicRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.BasicRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.BasicRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.BasicRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.BasicRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.BasicRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    
    return tmp;
}
Test.BasicRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
}
Test.BasicRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.BasicRsp.new = function () {
    return new Test.BasicRsp();
}
Test.BasicRsp.create = function (is) {
    return Test.BasicRsp._readFrom(is);
}
Test.LoginReq = function() {
    this.username = "";
    this.password = "";
    this._classname = "Test.LoginReq";
};
Test.LoginReq.prototype = new TafStream.JceStruct();
Test.LoginReq._classname = "Test.LoginReq";

Test.LoginReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.LoginReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.LoginReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.LoginReq();
    tmp.username = is.readString(0, true, "");
    tmp.password = is.readString(1, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.LoginReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.username);
    os.writeString(1, this.password);
    os.resumePrecision && os.resumePrecision();
};
Test.LoginReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.LoginReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.LoginReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.username = this.username;
    tmp.password = this.password;
    
    return tmp;
}
Test.LoginReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("username") || (this.username = json.username);
    !json.hasOwnProperty("password") || (this.password = json.password);
}
Test.LoginReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.LoginReq.new = function () {
    return new Test.LoginReq();
}
Test.LoginReq.create = function (is) {
    return Test.LoginReq._readFrom(is);
}
Test.LoginRsp = function() {
    this.iRet = 0;
    this.message = "";
    this._classname = "Test.LoginRsp";
};
Test.LoginRsp.prototype = new TafStream.JceStruct();
Test.LoginRsp._classname = "Test.LoginRsp";

Test.LoginRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.LoginRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.LoginRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.LoginRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.LoginRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.LoginRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.LoginRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.LoginRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    
    return tmp;
}
Test.LoginRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
}
Test.LoginRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.LoginRsp.new = function () {
    return new Test.LoginRsp();
}
Test.LoginRsp.create = function (is) {
    return Test.LoginRsp._readFrom(is);
}
Test.PageInfoReq = function() {
    this.basicInfo = new Test.BasicInfo();
    this.uid = 0;
    this.pageNum = 1;
    this.pageSize = 10;
    this._classname = "Test.PageInfoReq";
};
Test.PageInfoReq.prototype = new TafStream.JceStruct();
Test.PageInfoReq._classname = "Test.PageInfoReq";

Test.PageInfoReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.PageInfoReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.PageInfoReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.PageInfoReq();
    tmp.basicInfo = is.readStruct(0, false, Test.BasicInfo);
    tmp.uid = is.readInt64(1, false, 0);
    tmp.pageNum = is.readInt32(2, false, 1);
    tmp.pageSize = is.readInt32(3, false, 10);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.PageInfoReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeStruct(0, this.basicInfo);
    if (this.uid != undefined && this.uid != 0) {
        os.writeInt64(1, this.uid);
    }
    if (this.pageNum != undefined && this.pageNum != 1) {
        os.writeInt32(2, this.pageNum);
    }
    if (this.pageSize != undefined && this.pageSize != 10) {
        os.writeInt32(3, this.pageSize);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.PageInfoReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.PageInfoReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.PageInfoReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.basicInfo = this.basicInfo.toObject();
    tmp.uid = this.uid;
    tmp.pageNum = this.pageNum;
    tmp.pageSize = this.pageSize;
    
    return tmp;
}
Test.PageInfoReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("basicInfo") || (this.basicInfo.readFromObject(json.basicInfo));
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("pageNum") || (this.pageNum = json.pageNum);
    !json.hasOwnProperty("pageSize") || (this.pageSize = json.pageSize);
}
Test.PageInfoReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.PageInfoReq.new = function () {
    return new Test.PageInfoReq();
}
Test.PageInfoReq.create = function (is) {
    return Test.PageInfoReq._readFrom(is);
}
Test.QueryIdReq = function() {
    this.basicInfo = new Test.BasicInfo();
    this.uid = 0;
    this._classname = "Test.QueryIdReq";
};
Test.QueryIdReq.prototype = new TafStream.JceStruct();
Test.QueryIdReq._classname = "Test.QueryIdReq";

Test.QueryIdReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.QueryIdReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.QueryIdReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.QueryIdReq();
    tmp.basicInfo = is.readStruct(0, false, Test.BasicInfo);
    tmp.uid = is.readInt64(1, true, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.QueryIdReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeStruct(0, this.basicInfo);
    os.writeInt64(1, this.uid);
    os.resumePrecision && os.resumePrecision();
};
Test.QueryIdReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.QueryIdReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.QueryIdReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.basicInfo = this.basicInfo.toObject();
    tmp.uid = this.uid;
    
    return tmp;
}
Test.QueryIdReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("basicInfo") || (this.basicInfo.readFromObject(json.basicInfo));
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
}
Test.QueryIdReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.QueryIdReq.new = function () {
    return new Test.QueryIdReq();
}
Test.QueryIdReq.create = function (is) {
    return Test.QueryIdReq._readFrom(is);
}
Test.UserInfo = function() {
    this.uid = 0;
    this.username = "";
    this.password = "";
    this.gender = "";
    this.tel = "";
    this.age = 0;
    this.createTime = "";
    this.updateTime = "";
    this._classname = "Test.UserInfo";
};
Test.UserInfo.prototype = new TafStream.JceStruct();
Test.UserInfo._classname = "Test.UserInfo";

Test.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.UserInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.UserInfo();
    tmp.uid = is.readInt64(0, false, 0);
    tmp.username = is.readString(1, false, "");
    tmp.password = is.readString(2, false, "");
    tmp.gender = is.readString(3, false, "");
    tmp.tel = is.readString(4, false, "");
    tmp.age = is.readInt32(5, false, 0);
    tmp.createTime = is.readString(6, false, "");
    tmp.updateTime = is.readString(7, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.UserInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.uid != undefined && this.uid != 0) {
        os.writeInt64(0, this.uid);
    }
    if (this.username != undefined && this.username != "") {
        os.writeString(1, this.username);
    }
    if (this.password != undefined && this.password != "") {
        os.writeString(2, this.password);
    }
    if (this.gender != undefined && this.gender != "") {
        os.writeString(3, this.gender);
    }
    if (this.tel != undefined && this.tel != "") {
        os.writeString(4, this.tel);
    }
    if (this.age != undefined && this.age != 0) {
        os.writeInt32(5, this.age);
    }
    if (this.createTime != undefined && this.createTime != "") {
        os.writeString(6, this.createTime);
    }
    if (this.updateTime != undefined && this.updateTime != "") {
        os.writeString(7, this.updateTime);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.UserInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.UserInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.username = this.username;
    tmp.password = this.password;
    tmp.gender = this.gender;
    tmp.tel = this.tel;
    tmp.age = this.age;
    tmp.createTime = this.createTime;
    tmp.updateTime = this.updateTime;
    
    return tmp;
}
Test.UserInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("username") || (this.username = json.username);
    !json.hasOwnProperty("password") || (this.password = json.password);
    !json.hasOwnProperty("gender") || (this.gender = json.gender);
    !json.hasOwnProperty("tel") || (this.tel = json.tel);
    !json.hasOwnProperty("age") || (this.age = json.age);
    !json.hasOwnProperty("createTime") || (this.createTime = json.createTime);
    !json.hasOwnProperty("updateTime") || (this.updateTime = json.updateTime);
}
Test.UserInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.UserInfo.new = function () {
    return new Test.UserInfo();
}
Test.UserInfo.create = function (is) {
    return Test.UserInfo._readFrom(is);
}
Test.UserInfoRsp = function() {
    this.iRet = 0;
    this.message = "";
    this.userinfo = new Test.UserInfo();
    this._classname = "Test.UserInfoRsp";
};
Test.UserInfoRsp.prototype = new TafStream.JceStruct();
Test.UserInfoRsp._classname = "Test.UserInfoRsp";

Test.UserInfoRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.UserInfoRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.UserInfoRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.UserInfoRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp.userinfo = is.readStruct(2, false, Test.UserInfo);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.UserInfoRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    os.writeStruct(2, this.userinfo);
    os.resumePrecision && os.resumePrecision();
};
Test.UserInfoRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.UserInfoRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.UserInfoRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    tmp.userinfo = this.userinfo.toObject();
    
    return tmp;
}
Test.UserInfoRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
    !json.hasOwnProperty("userinfo") || (this.userinfo.readFromObject(json.userinfo));
}
Test.UserInfoRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.UserInfoRsp.new = function () {
    return new Test.UserInfoRsp();
}
Test.UserInfoRsp.create = function (is) {
    return Test.UserInfoRsp._readFrom(is);
}
Test.UserInfoList = function() {
    this.total = 0;
    this.list = new TafStream.List(Test.UserInfo);
    this._classname = "Test.UserInfoList";
};
Test.UserInfoList.prototype = new TafStream.JceStruct();
Test.UserInfoList._classname = "Test.UserInfoList";

Test.UserInfoList._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.UserInfoList._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.UserInfoList._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.UserInfoList();
    tmp.total = is.readInt32(0, false, 0);
    tmp.list = is.readList(1, false, TafStream.List(Test.UserInfo));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.UserInfoList.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.total != undefined && this.total != 0) {
        os.writeInt32(0, this.total);
    }
    if (this.list != undefined) {
        os.writeList(1, this.list);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.UserInfoList.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.UserInfoList.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.UserInfoList.prototype.toObject = function() { 
    var tmp = {};

    tmp.total = this.total;
    tmp.list = this.list.toObject();
    
    return tmp;
}
Test.UserInfoList.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("total") || (this.total = json.total);
    !json.hasOwnProperty("list") || (this.list.readFromObject(json.list));
}
Test.UserInfoList.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.UserInfoList.new = function () {
    return new Test.UserInfoList();
}
Test.UserInfoList.create = function (is) {
    return Test.UserInfoList._readFrom(is);
}
Test.UserListRsp = function() {
    this.iRet = 0;
    this.message = "";
    this.data = new Test.UserInfoList();
    this._classname = "Test.UserListRsp";
};
Test.UserListRsp.prototype = new TafStream.JceStruct();
Test.UserListRsp._classname = "Test.UserListRsp";

Test.UserListRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.UserListRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.UserListRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.UserListRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp.data = is.readStruct(2, false, Test.UserInfoList);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.UserListRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    os.writeStruct(2, this.data);
    os.resumePrecision && os.resumePrecision();
};
Test.UserListRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.UserListRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.UserListRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    tmp.data = this.data.toObject();
    
    return tmp;
}
Test.UserListRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
    !json.hasOwnProperty("data") || (this.data.readFromObject(json.data));
}
Test.UserListRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.UserListRsp.new = function () {
    return new Test.UserListRsp();
}
Test.UserListRsp.create = function (is) {
    return Test.UserListRsp._readFrom(is);
}
Test.SaveUserInfoReq = function() {
    this.basicInfo = new Test.BasicInfo();
    this.userinfo = new Test.UserInfo();
    this._classname = "Test.SaveUserInfoReq";
};
Test.SaveUserInfoReq.prototype = new TafStream.JceStruct();
Test.SaveUserInfoReq._classname = "Test.SaveUserInfoReq";

Test.SaveUserInfoReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.SaveUserInfoReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.SaveUserInfoReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.SaveUserInfoReq();
    tmp.basicInfo = is.readStruct(0, false, Test.BasicInfo);
    tmp.userinfo = is.readStruct(1, true, Test.UserInfo);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.SaveUserInfoReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeStruct(0, this.basicInfo);
    os.writeStruct(1, this.userinfo);
    os.resumePrecision && os.resumePrecision();
};
Test.SaveUserInfoReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.SaveUserInfoReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.SaveUserInfoReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.basicInfo = this.basicInfo.toObject();
    tmp.userinfo = this.userinfo.toObject();
    
    return tmp;
}
Test.SaveUserInfoReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("basicInfo") || (this.basicInfo.readFromObject(json.basicInfo));
    !json.hasOwnProperty("userinfo") || (this.userinfo.readFromObject(json.userinfo));
}
Test.SaveUserInfoReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.SaveUserInfoReq.new = function () {
    return new Test.SaveUserInfoReq();
}
Test.SaveUserInfoReq.create = function (is) {
    return Test.SaveUserInfoReq._readFrom(is);
}
Test.SaveUserInfoRsp = function() {
    this.iRet = 0;
    this.message = "";
    this.uid = 0;
    this._classname = "Test.SaveUserInfoRsp";
};
Test.SaveUserInfoRsp.prototype = new TafStream.JceStruct();
Test.SaveUserInfoRsp._classname = "Test.SaveUserInfoRsp";

Test.SaveUserInfoRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.SaveUserInfoRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.SaveUserInfoRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.SaveUserInfoRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp.uid = is.readInt64(2, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.SaveUserInfoRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    if (this.uid != undefined && this.uid != 0) {
        os.writeInt64(2, this.uid);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.SaveUserInfoRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.SaveUserInfoRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.SaveUserInfoRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    tmp.uid = this.uid;
    
    return tmp;
}
Test.SaveUserInfoRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
}
Test.SaveUserInfoRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.SaveUserInfoRsp.new = function () {
    return new Test.SaveUserInfoRsp();
}
Test.SaveUserInfoRsp.create = function (is) {
    return Test.SaveUserInfoRsp._readFrom(is);
}

Test.UserProxy.prototype.delUser = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.BasicRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('delUser', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.getUserDetail = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.UserInfoRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getUserDetail', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.getUserDetailForAd = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.UserInfoRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getUserDetailForAd', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.getUserList = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.UserListRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getUserList', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.getUserListForAd = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.UserListRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getUserListForAd', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.login = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.LoginRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('login', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.loginForAd = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.LoginRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('loginForAd', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.UserProxy.prototype.saveUser = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.SaveUserInfoRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('saveUser', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



