// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 5.3.1 by TAF Team.
// Generated from `/data/user/xuzhengwei/upload/Hello.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var Test = Test || {};
module.exports.Test = Test;

Test.HelloProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

Test.HelloProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

Test.HelloProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


Test.HelloWorldReq = function() {
    this.data = "";
    this._classname = "Test.HelloWorldReq";
};
Test.HelloWorldReq.prototype = new TafStream.JceStruct();
Test.HelloWorldReq._classname = "Test.HelloWorldReq";

Test.HelloWorldReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.HelloWorldReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.HelloWorldReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.HelloWorldReq();
    tmp.data = is.readString(0, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.HelloWorldReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.data != undefined && this.data != "") {
        os.writeString(0, this.data);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.HelloWorldReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.HelloWorldReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.HelloWorldReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.data = this.data;
    
    return tmp;
}
Test.HelloWorldReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("data") || (this.data = json.data);
}
Test.HelloWorldReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.HelloWorldReq.new = function () {
    return new Test.HelloWorldReq();
}
Test.HelloWorldReq.create = function (is) {
    return Test.HelloWorldReq._readFrom(is);
}
Test.HelloWorldRsp = function() {
    this.iRet = 0;
    this.message = "";
    this._classname = "Test.HelloWorldRsp";
};
Test.HelloWorldRsp.prototype = new TafStream.JceStruct();
Test.HelloWorldRsp._classname = "Test.HelloWorldRsp";

Test.HelloWorldRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.HelloWorldRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.HelloWorldRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Test.HelloWorldRsp();
    tmp.iRet = is.readInt32(0, false, 0);
    tmp.message = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Test.HelloWorldRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.iRet != undefined && this.iRet != 0) {
        os.writeInt32(0, this.iRet);
    }
    if (this.message != undefined && this.message != "") {
        os.writeString(1, this.message);
    }
    os.resumePrecision && os.resumePrecision();
};
Test.HelloWorldRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Test.HelloWorldRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.HelloWorldRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRet = this.iRet;
    tmp.message = this.message;
    
    return tmp;
}
Test.HelloWorldRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRet") || (this.iRet = json.iRet);
    !json.hasOwnProperty("message") || (this.message = json.message);
}
Test.HelloWorldRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.HelloWorldRsp.new = function () {
    return new Test.HelloWorldRsp();
}
Test.HelloWorldRsp.create = function (is) {
    return Test.HelloWorldRsp._readFrom(is);
}

Test.HelloProxy.prototype.getData = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.HelloWorldRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.HelloProxy.prototype.helloWorld = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.HelloWorldRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('helloWorld', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.HelloProxy.prototype.inserData = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, Test.HelloWorldRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('inserData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Test.HelloProxy.prototype.test = function () {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('test', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



